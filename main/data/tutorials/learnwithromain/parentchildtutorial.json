{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial"},"kind":"project","sections":[{"chapter":"Composing features","content":[{"inlineContent":[{"type":"text","text":"Learn how to facilitate parent-child communication within TCA features. We will create both a parent and child feature and establish communication between them."}],"type":"paragraph"}],"estimatedTimeInMinutes":20,"title":"Building a Parent-Child Relationship","kind":"hero"},{"tasks":[{"title":"Creating a parent view with a child view","stepsSection":[{"media":null,"code":"01-01-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file named ","type":"text"},{"type":"codeVoice","code":"ChildFeature.swift"},{"type":"text","text":". This feature contains decrement and increment buttons with a label specifying the current value, which can be tapped to reset its value to zero."}]}],"type":"step","runtimePreview":"01-01-01-image-0001.png","caption":[]},{"type":"step","code":"01-01-01-code-0002.swift","caption":[{"content":[{"inlineContent":[{"text":"Since TCA 1.8, the @Reducer macro automatically fulfills the reducer requirements. The parent reducer does not have any state, actions, or logic yet, so we can omit them.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"}],"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file named "},{"code":"ParentFeature.swift","type":"codeVoice"},{"type":"text","text":" with some basic scaffolding in place."}]}]},{"type":"paragraph","inlineContent":[{"text":"Let’s compose the features together at the reducer level.","type":"text"}]},{"code":"01-01-01-code-0003.swift","content":[{"inlineContent":[{"type":"text","text":"Add State and Action to the reducer. The parent reducer will hold the state and actions of the child reducer."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[],"media":null},{"caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It exposes child state and actions to the parent reducer."}]}],"style":"note","type":"aside","name":"Note"}],"content":[{"inlineContent":[{"text":"Next, we need to implement the body of the reducer. To compose the child reducer within the parent reducer, we use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/scope"},{"text":" reducer. This allows us to focus on a sub-domain of the parent feature and run a child reducer on that sub-domain.","type":"text"}],"type":"paragraph"}],"code":"01-01-01-code-0004.swift","type":"step","media":null,"runtimePreview":null},{"inlineContent":[{"text":"Let’s compose the features together at the view level.","type":"text"}],"type":"paragraph"},{"code":"01-01-01-code-0005.swift","caption":[],"type":"step","media":null,"runtimePreview":"01-01-01-image-0005.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"text":" method on the store to derive a child store focused in on just the child domain.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"The two views are now composed together:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The parent state consists of its own values and the child state."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The parent reducer receives every action dispatched by the child reducer.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The child store is a scoped variant of the parent store.","type":"text"}]}]}]}],"anchor":"Creating-a-parent-view-with-a-child-view","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"We will compose the parent and child features together."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a practice that enables us to build complex functionality by combining smaller, more manageable features."}]}]}]},{"anchor":"Communication-from-Child-to-Parent","stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s see how the child should communicate with a parent feature."}]},{"inlineContent":[{"type":"text","text":"If the parent needs to respond to events happening in the child, it can simply listen to the corresponding actions that arrive in the reducer."}],"type":"paragraph"},{"caption":[{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"This is possible thanks to the ","type":"text"},{"type":"reference","identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/scope","isActive":true},{"type":"text","text":" reducer."}],"type":"paragraph"}],"type":"aside"}],"content":[{"inlineContent":[{"type":"text","text":"We just need to add an action to listen to from the child reducer."}],"type":"paragraph"}],"type":"step","media":null,"code":"01-01-02-code-0001.swift","runtimePreview":"01-01-02-video-0001.mp4"},{"inlineContent":[{"text":"There is no need to add extra code to be aware of the current state of the child reducer since the parent reducer has a reference to it.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"As we can see, TCA follows a strict unidirectional data flow pattern (state flows from parent to child, events flows from child to parent…) which enforces immutability and a single source of truth. As the app grows, it simplifies handling complex interactions and state management.","type":"text"}]}],"title":"Communication from Child to Parent","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The terms “parent” and “child” are used to describe the relationship between different components or modules within an app."}],"type":"paragraph"}]}]},{"anchor":"Communication-from-Parent-to-Child","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"We’ve seen how the child communicates with its parent. The same approach cannot be followed from parent to child."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Communication from Parent to Child","stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the parent wants to execute some logic within the child by reusing one of its actions, it should be done by directly invoking the child reducer."}]},{"caption":[{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Find more details on sharing logic in child features "},{"isActive":true,"type":"reference","identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/performance\/#Sharing-logic-in-child-features"},{"text":".","type":"text"}]}],"style":"note","type":"aside"}],"code":"01-01-03-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"text":"To send an action from the parent to the child, invoke the child reducer using a reduce method. For example, if we want to ensure that the count never goes lower than zero, we can reuse a reset action.","type":"text"}]}],"media":null,"runtimePreview":"01-01-03-video-0001.mp4","type":"step"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the parent needs to update the state of the child without any shared logic available, we can create an extension on the child state."}]},{"media":null,"caption":[{"style":"note","content":[{"inlineContent":[{"text":"It is better to use a mutating method rather than updating the child state directly from the parent reducer, as a new child reducer would be recreated, potentially leading to lost states and increased complexity.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note"}],"content":[{"inlineContent":[{"text":"We implement a mutating method where we update any necessary state and return an action. For example, let’s say we want to set the initial count to 10.","type":"text"}],"type":"paragraph"}],"type":"step","code":"01-01-03-code-0002.swift","runtimePreview":"01-01-03-video-0002.mov"}]},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"TCA facilitates unit testing by enabling isolated testing of components with well-defined inputs and outputs. This is achieved thanks to the reducers, which separate business logic from UI.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Reducers are functions that take the current state and an action as input and return a new state as output."}],"type":"paragraph"}]}],"anchor":"Testing-the-communication","title":"Testing the communication","stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before we perform any assertions, the State must be "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},{"runtimePreview":null,"code":"01-01-04-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"text":"In order to assert against sent actions from the parent store, its ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" must be "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"step","caption":[],"media":null},{"code":"01-01-04-code-0002.swift","caption":[],"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"In order to assert against sent actions from the child store, its ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" must also be ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]}]},{"code":"01-01-04-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s begin by creating a "},{"type":"codeVoice","code":"ParentFeatureTests.swift"},{"type":"text","text":" file with some basic scaffolding set up for the test."}]}],"caption":[{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/xcode\/swift-testing\/","type":"reference"},{"text":" framework is used.","type":"text"}]}],"name":"Note","style":"note"}],"runtimePreview":null,"type":"step","media":null},{"code":"01-01-04-code-0004.swift","type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s first set up our test store and then assert how the state changes when the "},{"code":"onAppear","type":"codeVoice"},{"text":" action is sent to the store.","type":"text"}]}],"caption":[{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"TestStore"},{"type":"text","text":" provides a controlled environment for testing components of the architecture, such as reducers and effects."}]}],"style":"note"}]},{"code":"01-01-04-code-0005.swift","caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Since TCA 1.9, we can use case key paths with the send method. This simplifies integration-style tests that send deeply-nested actions and aligns with the syntax of the receive method. Find more details ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/1.9.0\/documentation\/composablearchitecture\/migratingto1.9#Sending-test-store-actions"},{"text":".","type":"text"}]}],"type":"aside","name":"Note"}],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Finally, we’ll ensure the count value is correct by testing the increment, decrement, and reset behaviors of our child feature."}],"type":"paragraph"}],"runtimePreview":null,"media":null}]}],"kind":"tasks"},{"action":{"identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/CommonIssueTutorial","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started"},"title":"Dealing with compiler issues","kind":"callToAction","abstract":[{"type":"text","text":"Learn how to identify and resolve common errors when working with TCA. In this guide, you’ll learn how to diagnose and fix these issues efficiently."}],"featuredEyebrow":"Tutorial"}],"metadata":{"category":"The Composable Architecture","role":"project","categoryPathComponent":"RefineComposableArchitecture","title":"Building a Parent-Child Relationship"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/learnwithromain\/parentchildtutorial"]}],"hierarchy":{"paths":[["doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/$volume","doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features"]],"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","modules":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features","projects":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial","sections":[{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Creating-a-parent-view-with-a-child-view"},{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Communication-from-Child-to-Parent","kind":"task"},{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Communication-from-Parent-to-Child","kind":"task"},{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Testing-the-communication"}]}]},{"projects":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/CommonIssueTutorial","sections":[{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/CommonIssueTutorial#Identifying-the-issue"},{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/CommonIssueTutorial#Resolving-the-issue"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/NavigationIssueTutorial#Resolving-navigation-issue"}],"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/NavigationIssueTutorial"},{"sections":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/RandomBadAccessCrashes#Understanding-the-issue","kind":"task"},{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/RandomBadAccessCrashes#Applying-workarounds","kind":"task"}],"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/RandomBadAccessCrashes"}],"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Compiler-issues"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"01-01-04-code-0002.swift":{"identifier":"01-01-04-code-0002.swift","fileName":"ChildFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ChildFeature {","    @ObservableState","    struct State: Equatable {","        var count: Int","    }","    ","    enum Action {","        case decrementButtonTapped","        case incrementButtonTapped","        case resetTapped","    }","    ","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            switch action {","            case .incrementButtonTapped:","                state.count += 1","                return .none","            case .decrementButtonTapped:","                state.count -= 1","                return .none","            case .resetTapped:","                state.count = 0","                return .none","            }","        }","    }","}","","struct ChildView: View {","    let store: StoreOf<ChildFeature>","    ","    var body: some View {","        HStack {","            Button(\"-\") {","                store.send(.decrementButtonTapped)","            }","            .font(.largeTitle)","            .padding()","            .background(Color.black.opacity(0.1))","            .cornerRadius(10)","            Text(String(store.count))","                .font(.largeTitle)","                .padding()","                .background(Color.black.opacity(0.1))","                .cornerRadius(10)","                .onTapGesture {","                    store.send(.resetTapped)","                }","            Button(\"+\") {","                store.send(.incrementButtonTapped)","            }","            .font(.largeTitle)","            .padding()","            .background(Color.black.opacity(0.1))","            .cornerRadius(10)","        }","    }","}"],"syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":7}]},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Communication-from-Parent-to-Child":{"abstract":[{"text":"Learn how to facilitate parent-child communication within TCA features. We will create both a parent and child feature and establish communication between them.","type":"text"}],"url":"\/tutorials\/learnwithromain\/parentchildtutorial#Communication-from-Parent-to-Child","type":"section","title":"Communication from Parent to Child","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Communication-from-Parent-to-Child"},"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture/Composing-features":{"identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features","abstract":[],"url":"\/tutorials\/refinecomposablearchitecture\/composing-features","type":"topic","role":"article","kind":"article","title":"Composing features"},"01-01-01-code-0002.swift":{"fileName":"ParentFeature.swift","fileType":"swift","highlights":[],"identifier":"01-01-01-code-0002.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""],"type":"file","syntax":"swift"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/CommonIssueTutorial":{"identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/CommonIssueTutorial","estimatedTime":"5min","abstract":[{"text":"Learn how to identify and resolve common errors when working with TCA. In this guide, you’ll learn how to diagnose and fix these issues efficiently.","type":"text"}],"url":"\/tutorials\/learnwithromain\/commonissuetutorial","type":"topic","role":"project","kind":"project","title":"Dealing with compiler issues"},"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/scope":{"url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/scope","type":"link","title":" Scope","titleInlineContent":[{"type":"text","text":" Scope"}],"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/scope"},"01-01-04-code-0001.swift":{"fileName":"ParentFeature.swift","fileType":"swift","highlights":[{"line":7}],"identifier":"01-01-04-code-0001.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State: Equatable {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","        case onAppear","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .onAppear:","                return state.child","                    .updateNumber(with: 10)","                    .map { @Sendable action in Action.child(action) }","            default:","                return .none","            }","        }","    }","}","","extension ChildFeature.State {","    mutating func updateNumber(with count: Int) -> Effect<ChildFeature.Action> {","        self.count = count","        return .none","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","            .onAppear {","                store.send(.onAppear)","            }","        }","    }","}"],"type":"file","syntax":"swift"},"01-01-01-code-0004.swift":{"identifier":"01-01-01-code-0004.swift","fileName":"ParentFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""],"syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19}]},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/CommonIssueTutorial#Resolving-the-issue":{"url":"\/tutorials\/learnwithromain\/commonissuetutorial#Resolving-the-issue","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/CommonIssueTutorial#Resolving-the-issue","abstract":[{"text":"Learn how to identify and resolve common errors when working with TCA. In this guide, you’ll learn how to diagnose and fix these issues efficiently.","type":"text"}],"title":"Resolving the issue","role":"pseudoSymbol","kind":"section","type":"section"},"01-01-02-code-0001.swift":{"fileName":"ParentFeature.swift","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"identifier":"01-01-02-code-0001.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.incrementButtonTapped):","                \/\/ We listen to the incrementButtonTapped child action","                return .none","            default:","                return .none","            }","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""],"type":"file","syntax":"swift"},"01-01-03-code-0001.swift":{"identifier":"01-01-03-code-0001.swift","fileName":"ParentFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.decrementButtonTapped):","                guard state.child.count < 0 else { return .none }","                ","                return ChildFeature()","                    .reduce(","                        into: &state.child,","                        action: .resetTapped","                    )","                    .map { @Sendable action in Action.child(action) }","            default:","                return .none","            }","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}"],"syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}]},"01-01-01-code-0001.swift":{"fileName":"ChildFeature.swift","fileType":"swift","highlights":[],"identifier":"01-01-01-code-0001.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ChildFeature {","    @ObservableState","    struct State {","        var count: Int","    }","    ","    enum Action {","        case decrementButtonTapped","        case incrementButtonTapped","        case resetTapped","    }","    ","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            switch action {","            case .incrementButtonTapped:","                state.count += 1","                return .none","            case .decrementButtonTapped:","                state.count -= 1","                return .none","            case .resetTapped:","                state.count = 0","                return .none","            }","        }","    }","}","","struct ChildView: View {","    let store: StoreOf<ChildFeature>","    ","    var body: some View {","        HStack {","            Button(\"-\") {","                store.send(.decrementButtonTapped)","            }","            .font(.largeTitle)","            .padding()","            .background(Color.black.opacity(0.1))","            .cornerRadius(10)","            Text(String(store.count))","                .font(.largeTitle)","                .padding()","                .background(Color.black.opacity(0.1))","                .cornerRadius(10)","                .onTapGesture {","                    store.send(.resetTapped)","                }","            Button(\"+\") {","                store.send(.incrementButtonTapped)","            }","            .font(.largeTitle)","            .padding()","            .background(Color.black.opacity(0.1))","            .cornerRadius(10)","        }","    }","}"],"type":"file","syntax":"swift"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/NavigationIssueTutorial":{"abstract":[{"text":"Learn how to troubleshoot and resolve common navigation errors when working with TCA. In this guide, you’ll discover effective solutions to overcome these issues.","type":"text"}],"estimatedTime":"5min","url":"\/tutorials\/learnwithromain\/navigationissuetutorial","type":"topic","title":"Resolving navigation issues","role":"project","kind":"project","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/NavigationIssueTutorial"},"https://pointfreeco.github.io/swift-composable-architecture/1.17.0/documentation/composablearchitecture":{"url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/1.17.0\/documentation\/composablearchitecture","type":"link","title":"1.17","titleInlineContent":[{"type":"text","text":"1.17"}],"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/1.17.0\/documentation\/composablearchitecture"},"01-01-01-code-0005.swift":{"fileName":"ParentFeature.swift","fileType":"swift","highlights":[{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"identifier":"01-01-01-code-0005.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""],"type":"file","syntax":"swift"},"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture/Compiler-issues":{"url":"\/tutorials\/refinecomposablearchitecture\/compiler-issues","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Compiler-issues","abstract":[],"title":"Compiler issues","role":"article","kind":"article","type":"topic"},"01-01-03-code-0002.swift":{"identifier":"01-01-03-code-0002.swift","fileName":"ParentFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","        case onAppear","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .onAppear:","                return state.child","                    .updateNumber(with: 10)","                    .map { @Sendable action in Action.child(action) }","            default:","                return .none","            }","        }","    }","}","","extension ChildFeature.State {","    mutating func updateNumber(with count: Int) -> Effect<ChildFeature.Action> {","        self.count = count","        return .none","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","            .onAppear {","                store.send(.onAppear)","            }","        }","    }","}"],"syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":23},{"line":24},{"line":25},{"line":26},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":50},{"line":51},{"line":52}]},"01-01-01-image-0001.png":{"type":"image","alt":"iOS application showing a text view in the center displaying a 0 and two buttons positioned on each side of it, one for decrementing the count and one for incrementing.","variants":[{"traits":["1x","light"],"url":"\/images\/com.learnwithromain.learnwithromain\/01-01-01-image-0001.png"}],"identifier":"01-01-01-image-0001.png"},"01-01-04-code-0003.swift":{"identifier":"01-01-04-code-0003.swift","fileName":"ParentFeatureTests.swift","content":["import ComposableArchitecture","import Testing","","struct ParentFeatureTests {","    @Test func parentFeature() async {","","    }","}"],"syntax":"swift","type":"file","fileType":"swift","highlights":[]},"01-01-01-image-0005.png":{"type":"image","alt":"iOS application showing a text view in the center displaying a 0 and two buttons positioned on each side of it, one for decrementing the count and one for incrementing.","variants":[{"traits":["1x","light"],"url":"\/images\/com.learnwithromain.learnwithromain\/01-01-01-image-0005.png"}],"identifier":"01-01-01-image-0005.png"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/NavigationIssueTutorial#Resolving-navigation-issue":{"url":"\/tutorials\/learnwithromain\/navigationissuetutorial#Resolving-navigation-issue","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/NavigationIssueTutorial#Resolving-navigation-issue","abstract":[{"text":"Learn how to troubleshoot and resolve common navigation errors when working with TCA. In this guide, you’ll discover effective solutions to overcome these issues.","type":"text"}],"title":"Resolving navigation issue","role":"pseudoSymbol","kind":"section","type":"section"},"01-01-03-video-0002.mov":{"type":"video","alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/com.learnwithromain.learnwithromain\/01-01-03-video-0002.mov"}],"poster":null,"identifier":"01-01-03-video-0002.mov"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Creating-a-parent-view-with-a-child-view":{"abstract":[{"text":"Learn how to facilitate parent-child communication within TCA features. We will create both a parent and child feature and establish communication between them.","type":"text"}],"url":"\/tutorials\/learnwithromain\/parentchildtutorial#Creating-a-parent-view-with-a-child-view","type":"section","title":"Creating a parent view with a child view","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Creating-a-parent-view-with-a-child-view"},"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/performance/#Sharing-logic-in-child-features":{"url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/performance\/#Sharing-logic-in-child-features","type":"link","title":"here","titleInlineContent":[{"type":"text","text":"here"}],"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/performance\/#Sharing-logic-in-child-features"},"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture":{"abstract":[{"text":"This interactive tutorial aims to provide best practices for building a project with TCA ","type":"text"},{"isActive":true,"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/1.17.0\/documentation\/composablearchitecture","type":"reference"},{"text":" and Xcode 16. It brings together information to help developers apply TCA principles effectively in their projects.","type":"text"}],"url":"\/tutorials\/refinecomposablearchitecture","type":"topic","title":"Refine the Composable Architecture","role":"overview","kind":"overview","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture"},"01-01-02-video-0001.mp4":{"type":"video","alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/com.learnwithromain.learnwithromain\/01-01-02-video-0001.mp4"}],"poster":null,"identifier":"01-01-02-video-0001.mp4"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/RandomBadAccessCrashes":{"identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/RandomBadAccessCrashes","estimatedTime":"5min","abstract":[{"text":"Learn how to fix random bad access crashes in TCA applications. This guide will help apply effective solutions to prevent stack overflows.","type":"text"}],"url":"\/tutorials\/learnwithromain\/randombadaccesscrashes","type":"topic","role":"project","kind":"project","title":"Resolving random bad access crashes"},"01-01-01-code-0003.swift":{"fileName":"ParentFeature.swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"identifier":"01-01-01-code-0003.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""],"type":"file","syntax":"swift"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Testing-the-communication":{"abstract":[{"text":"Learn how to facilitate parent-child communication within TCA features. We will create both a parent and child feature and establish communication between them.","type":"text"}],"url":"\/tutorials\/learnwithromain\/parentchildtutorial#Testing-the-communication","type":"section","title":"Testing the communication","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Testing-the-communication"},"https://developer.apple.com/xcode/swift-testing/":{"url":"https:\/\/developer.apple.com\/xcode\/swift-testing\/","type":"link","title":"Swift Testing","titleInlineContent":[{"type":"text","text":"Swift Testing"}],"identifier":"https:\/\/developer.apple.com\/xcode\/swift-testing\/"},"01-01-04-code-0004.swift":{"fileName":"ParentFeatureTests.swift","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"identifier":"01-01-04-code-0004.swift","content":["import ComposableArchitecture","import Testing","","struct ParentFeatureTests {","    @Test func parentFeature() async {","        let store = await TestStore(","            initialState: ParentFeature.State(child: ChildFeature.State(count: 0)),","            reducer: ParentFeature.init","        )","        ","        await store.send(\\.onAppear) {","            $0.child.count = 10","        }","    }","}"],"type":"file","syntax":"swift"},"https://pointfreeco.github.io/swift-composable-architecture/1.9.0/documentation/composablearchitecture/migratingto1.9#Sending-test-store-actions":{"url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/1.9.0\/documentation\/composablearchitecture\/migratingto1.9#Sending-test-store-actions","type":"link","title":"here","titleInlineContent":[{"type":"text","text":"here"}],"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/1.9.0\/documentation\/composablearchitecture\/migratingto1.9#Sending-test-store-actions"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/RandomBadAccessCrashes#Applying-workarounds":{"identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/RandomBadAccessCrashes#Applying-workarounds","abstract":[{"text":"Learn how to fix random bad access crashes in TCA applications. This guide will help apply effective solutions to prevent stack overflows.","type":"text"}],"url":"\/tutorials\/learnwithromain\/randombadaccesscrashes#Applying-workarounds","type":"section","role":"pseudoSymbol","kind":"section","title":"Applying workarounds"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial":{"abstract":[{"text":"Learn how to facilitate parent-child communication within TCA features. We will create both a parent and child feature and establish communication between them.","type":"text"}],"estimatedTime":"20min","url":"\/tutorials\/learnwithromain\/parentchildtutorial","type":"topic","title":"Building a Parent-Child Relationship","role":"project","kind":"project","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/RandomBadAccessCrashes#Understanding-the-issue":{"abstract":[{"text":"Learn how to fix random bad access crashes in TCA applications. This guide will help apply effective solutions to prevent stack overflows.","type":"text"}],"url":"\/tutorials\/learnwithromain\/randombadaccesscrashes#Understanding-the-issue","type":"section","title":"Understanding the issue","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/RandomBadAccessCrashes#Understanding-the-issue"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Communication-from-Child-to-Parent":{"identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Communication-from-Child-to-Parent","abstract":[{"text":"Learn how to facilitate parent-child communication within TCA features. We will create both a parent and child feature and establish communication between them.","type":"text"}],"url":"\/tutorials\/learnwithromain\/parentchildtutorial#Communication-from-Child-to-Parent","type":"section","role":"pseudoSymbol","kind":"section","title":"Communication from Child to Parent"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/CommonIssueTutorial#Identifying-the-issue":{"abstract":[{"text":"Learn how to identify and resolve common errors when working with TCA. In this guide, you’ll learn how to diagnose and fix these issues efficiently.","type":"text"}],"url":"\/tutorials\/learnwithromain\/commonissuetutorial#Identifying-the-issue","type":"section","title":"Identifying the issue","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/CommonIssueTutorial#Identifying-the-issue"},"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/store/scope(state:action:)-90255":{"url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","type":"link","title":" scope(state:action:)","titleInlineContent":[{"type":"text","text":" scope(state:action:)"}],"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},"01-01-04-code-0005.swift":{"fileType":"swift","identifier":"01-01-04-code-0005.swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"content":["import ComposableArchitecture","import Testing","","struct ParentFeatureTests {","    @Test func parentFeature() async {","        let store = await TestStore(","            initialState: ParentFeature.State(child: ChildFeature.State(count: 0)),","            reducer: ParentFeature.init","        )","        ","        await store.send(\\.onAppear) {","            $0.child.count = 10","        }","        ","        await store.send(\\.child.incrementButtonTapped) {","            $0.child.count = 11","        }","        ","        await store.send(\\.child.resetTapped) {","            $0.child.count = 0","        }","        ","        await store.send(\\.child.decrementButtonTapped) {","            $0.child.count = -1","        }","    }","}"],"syntax":"swift","type":"file","fileName":"ParentFeatureTests.swift"},"01-01-03-video-0001.mp4":{"type":"video","alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/com.learnwithromain.learnwithromain\/01-01-03-video-0001.mp4"}],"poster":null,"identifier":"01-01-03-video-0001.mp4"}}}