{"metadata":{"categoryPathComponent":"RefineComposableArchitecture","title":"Building a Parent-Child Relationship","role":"project","category":"The Composable Architecture"},"identifier":{"url":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial","interfaceLanguage":"swift"},"sections":[{"kind":"hero","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views."}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The parent state consists of its own values and the child state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The Store of the Child is a scoped variant of the parent.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The parent reducer will receive every action sent by the child reducer."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The parent can modify the state of the child."}],"type":"paragraph"}]}],"type":"unorderedList"}],"title":"Building a Parent-Child Relationship","chapter":"Composing features"},{"kind":"tasks","tasks":[{"stepsSection":[{"caption":[],"media":null,"code":"01-01-01-code0001.swift","type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called ChildFeature.swift with some basic scaffolding in place."}]}]},{"caption":[],"type":"step","media":null,"code":"01-01-01-code0002.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called ParentFeature.swift with some basic scaffolding in place."}]}]}],"title":"Creating a parent view with a child view","contentSection":[{"content":[{"inlineContent":[{"text":"the terms “parent” and “child” are often used to describe the relationship between different components or modules within an app. Feature composition refers to the practice of building complex functionality by combining smaller, more manageable features.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Creating-a-parent-view-with-a-child-view"},{"stepsSection":[{"inlineContent":[{"type":"text","text":"If the parent needs to respond to events in the child, it can simply listen to the corresponding actions that arrive in the reducer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the parent needs to listen to actions from the child, we need to scope the child view from the parent view, in order to receive"}]},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file called ChildFeature.swift with some basic scaffolding in place.","type":"text"}]}],"media":null,"code":"01-01-01-code0001.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called ParentFeature.swift with some basic scaffolding in place."}]}],"media":null,"runtimePreview":null,"caption":[],"type":"step","code":"01-01-01-code0002.swift"}],"title":"Child -> Parent communication","anchor":"Child->-Parent-communication","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the terms “parent” and “child” are often used to describe the relationship between different components or modules within an app. Feature composition refers to the practice of building complex functionality by combining smaller, more manageable features.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"project","variants":[{"paths":["\/tutorials\/learnwithromain\/parentchildtutorial"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","modules":[{"projects":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial","sections":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Creating-a-parent-view-with-a-child-view","kind":"task"},{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Child-%3E-Parent-communication","kind":"task"}]}],"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features"}],"paths":[["doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/$volume","doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features"]]},"references":{"01-01-01-code0001.swift":{"identifier":"01-01-01-code0001.swift","fileType":"swift","type":"file","highlights":[],"syntax":"swift","fileName":"ChildFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ChildFeature {","    @ObservableState","    struct State {}","    ","    enum Action {","        case buttonTapped","    }","    ","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            switch action {","            case .buttonTapped:","                return .none","            }","        }","    }","}","","struct ChildView: View {","    let store: StoreOf<ChildFeature>","    ","    var body: some View {","        VStack {","            Text(\"ChildView\")","            Button(\"Button\") {","                store.send(.buttonTapped)","            }","        }","    }","}","","#Preview {","    ChildView(store: .init(","        initialState: .init(),","        reducer: {","            ChildFeature()","        }))","}"]},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Child-%3E-Parent-communication":{"title":"Child -> Parent communication","url":"\/tutorials\/learnwithromain\/parentchildtutorial#Child-%253E-Parent-communication","kind":"section","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Child-%3E-Parent-communication","role":"pseudoSymbol","type":"section","abstract":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}]},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Creating-a-parent-view-with-a-child-view":{"title":"Creating a parent view with a child view","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Creating-a-parent-view-with-a-child-view","url":"\/tutorials\/learnwithromain\/parentchildtutorial#Creating-a-parent-view-with-a-child-view","kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}]},"01-01-01-code0002.swift":{"identifier":"01-01-01-code0002.swift","type":"file","fileType":"swift","highlights":[],"syntax":"swift","fileName":"ParentFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.buttonTapped):","                return .none","            }","        }","        ._printChanges()","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""]},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial":{"abstract":[{"type":"text","text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views."}],"role":"project","estimatedTime":"30min","url":"\/tutorials\/learnwithromain\/parentchildtutorial","title":"Building a Parent-Child Relationship","kind":"project","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial","type":"topic"},"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture/Composing-features":{"title":"Composing features","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features","url":"\/tutorials\/refinecomposablearchitecture\/composing-features","kind":"article","role":"article","type":"topic","abstract":[]},"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture":{"type":"topic","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","kind":"overview","abstract":[{"text":"<#text#>","type":"text"}],"title":"Refine the Composable Architecture","role":"overview","url":"\/tutorials\/refinecomposablearchitecture"}}}