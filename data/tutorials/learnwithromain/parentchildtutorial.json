{"hierarchy":{"modules":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features","projects":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial","sections":[{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Creating-a-parent-view-with-a-child-view"},{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Child-%3E-Parent-communication","kind":"task"},{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Parent-%3E-Child-communication","kind":"task"}]}]}],"paths":[["doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/$volume","doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features"]],"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture"},"sections":[{"estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"The parent state consists of its own values and the child state.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The Store of the Child is a scoped variant of the parent.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The parent reducer will receive every action sent by the child reducer."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The parent can modify the state of the child.","type":"text"}]}]}],"type":"unorderedList"}],"title":"Building a Parent-Child Relationship","kind":"hero","chapter":"Composing features"},{"tasks":[{"anchor":"Creating-a-parent-view-with-a-child-view","stepsSection":[{"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Create a new file called ChildFeature.swift with some basic scaffolding in place. This feature has a minus and plus button with a number that specify its current value.","type":"text"}],"type":"paragraph"}],"code":"01-01-01-code0001.swift","caption":[{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since TCA 1.8, @Reducer macro automatically fulfills the reducer requirements. Our body does not have any logic, so we can omit it."}]}],"type":"aside"}],"media":null},{"type":"step","media":null,"runtimePreview":null,"code":"01-01-01-code0002.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file called ParentFeature.swift with some basic scaffolding in place.","type":"text"}]}],"caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since TCA 1.8, @Reducer macro automatically fulfills the reducer requirements."}]}],"type":"aside","name":"Note","style":"note"}]}],"title":"Creating a parent view with a child view","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"the terms “parent” and “child” are often used to describe the relationship between different components or modules within an app. Feature composition refers to the practice of building complex functionality by combining smaller, more manageable features.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}]},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"the terms “parent” and “child” are often used to describe the relationship between different components or modules within an app. Feature composition refers to the practice of building complex functionality by combining smaller, more manageable features.","type":"text"}]}]}],"anchor":"Child->-Parent-communication","title":"Child -> Parent communication","stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s compose the features together at the reducer level."}]},{"caption":[],"content":[{"inlineContent":[{"text":"Add a State and Action to the reducer. The parent reducer will hold the state and actions of the Child reducer.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"code":"01-01-02-code0001.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to implement the body of the reducer. Previously it was empty because we had no actions. To compose the child reducer in the parent reducer, we can use the Scope reducer. It allows you to focus in on a sub-domain of the parent feature, and run a child reducer on that sub-domain."}]}],"media":null,"code":"01-01-02-code0002.swift","type":"step","caption":[{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It exposes child state and action to the parent reducer."}]}]}],"runtimePreview":null},{"inlineContent":[{"type":"text","text":"Let’s compose the features together at the view level."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Use the scope(state:action:) method on Store to derive a child store focused in on just the child domain."}],"type":"paragraph"}],"code":"01-01-02-code0003.swift","media":null,"runtimePreview":null,"type":"step","caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the parent needs to respond to events in the child, it can simply listen to the corresponding actions that arrive in the reducer."}]},{"media":null,"type":"step","code":"01-01-02-code0004.swift","runtimePreview":null,"caption":[{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"This is possible thanks to Scope reducer"}],"type":"paragraph"}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"We just need to add an action to listen to from the child reducer.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If there is a need to update the childs state from the parent, it can get easily down by just changing the value in the reducer."}]},{"caption":[],"code":"01-01-02-code0005.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"We react to the child action from the parent reducer and update the state of the child.","type":"text"}]}],"media":null}]},{"stepsSection":[{"type":"paragraph","inlineContent":[{"text":"To send an action from the parent to the child, we need to create an extension on the child state. You can even use dependencies directly in those functions.","type":"text"}]},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"We create an extension on the child state in order to update the child state."}],"type":"paragraph"}],"type":"step","caption":[{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you only use the update() method within a reducer, it will correctly use the necessary dependencies. However, if you call this method outside of a reducer, the dependencies will return to their default values. Alternatively, you can pass the dependency explicitly to the update method for added clarity."}]}]}],"media":null,"code":"01-01-03-code0001.swift"},{"content":[],"code":"01-01-03-code0002.swift","runtimePreview":null,"caption":[],"type":"step","media":null}],"anchor":"Parent->-Child-communication","title":"Parent -> Child communication","contentSection":[{"content":[],"kind":"contentAndMedia","mediaPosition":"trailing"}]}],"kind":"tasks"}],"metadata":{"title":"Building a Parent-Child Relationship","role":"project","categoryPathComponent":"RefineComposableArchitecture","category":"The Composable Architecture"},"variants":[{"paths":["\/tutorials\/learnwithromain\/parentchildtutorial"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial"},"kind":"project","schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture/Composing-features":{"type":"topic","kind":"article","url":"\/tutorials\/refinecomposablearchitecture\/composing-features","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features","abstract":[],"title":"Composing features","role":"article"},"01-01-01-code0002.swift":{"type":"file","syntax":"swift","highlights":[],"fileName":"ParentFeature.swift","identifier":"01-01-01-code0002.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""]},"01-01-02-code0002.swift":{"type":"file","syntax":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19}],"fileName":"ParentFeature.swift","identifier":"01-01-02-code0002.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""]},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Child-%3E-Parent-communication":{"type":"section","kind":"section","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Child-%3E-Parent-communication","url":"\/tutorials\/learnwithromain\/parentchildtutorial#Child-%253E-Parent-communication","title":"Child -> Parent communication","abstract":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}],"role":"pseudoSymbol"},"01-01-01-code0001.swift":{"type":"file","syntax":"swift","highlights":[],"fileName":"ChildFeature.swift","identifier":"01-01-01-code0001.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ChildFeature {","    @Observable","    struct State {","        var number: Int","    }","    ","    enum Action {","        case minusButtonTapped","        case plusButtonTapped","    }","}","","struct ChildView: View {","    let store: StoreOf<ChildFeature>","    ","    var body: some View {","        HStack {","            Button(\"-\") {","                send(.minusButtonTapped)","            }","            Text(String(store.number))","            Button(\"+\") {","                send(.plusButtonTapped)","            }","        }","    }","}"]},"01-01-02-code0005.swift":{"type":"file","syntax":"swift","highlights":[{"line":23}],"fileName":"ParentFeature.swift","identifier":"01-01-02-code0005.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.plusButtonTapped):","                state.child.number += 1","                return .none","            }","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""]},"01-01-03-code0002.swift":{"type":"file","syntax":"swift","highlights":[{"line":1},{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}],"fileName":"ParentFeature.swift","identifier":"01-01-03-code0002.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.plusButtonTapped):","                let newNumber = state.child.number + 1","                return state.child.updateNumber(with: newNumber).map(Action.child)","                return .none","            }","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""]},"01-01-02-code0003.swift":{"type":"file","syntax":"swift","highlights":[{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"fileName":"ParentFeature.swift","identifier":"01-01-02-code0003.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""]},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Creating-a-parent-view-with-a-child-view":{"type":"section","kind":"section","url":"\/tutorials\/learnwithromain\/parentchildtutorial#Creating-a-parent-view-with-a-child-view","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Creating-a-parent-view-with-a-child-view","abstract":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}],"title":"Creating a parent view with a child view","role":"pseudoSymbol"},"01-01-02-code0004.swift":{"type":"file","syntax":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}],"fileName":"ParentFeature.swift","identifier":"01-01-02-code0004.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.plusButtonTapped):","                \/\/ We listen to the buttonTapped child action","                return .none","            }","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""]},"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture":{"type":"topic","kind":"overview","url":"\/tutorials\/refinecomposablearchitecture","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","abstract":[{"text":"Updated with TCA 1.7","type":"text"}],"title":"Refine the Composable Architecture","role":"overview"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Parent-%3E-Child-communication":{"type":"section","kind":"section","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Parent-%3E-Child-communication","url":"\/tutorials\/learnwithromain\/parentchildtutorial#Parent-%253E-Child-communication","title":"Parent -> Child communication","abstract":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}],"role":"pseudoSymbol"},"01-01-02-code0001.swift":{"type":"file","syntax":"swift","highlights":[],"fileName":"ParentFeature.swift","identifier":"01-01-02-code0001.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""]},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial":{"estimatedTime":"30min","type":"topic","kind":"project","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial","url":"\/tutorials\/learnwithromain\/parentchildtutorial","title":"Building a Parent-Child Relationship","abstract":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}],"role":"project"},"01-01-03-code0001.swift":{"type":"file","syntax":"swift","highlights":[],"fileName":"ParentFeature.swift","identifier":"01-01-03-code0001.swift","fileType":"swift","content":["extension Child.State {","    mutating func updateNumber(with number: Int) -> Effect<Child.Action> {","        state.number = number","        return .none","    }","}"]}}}