{"kind":"project","sections":[{"title":"Building a Parent-Child Relationship","chapter":"Composing features","estimatedTimeInMinutes":30,"kind":"hero","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to operate Parent-child communication in between TCA features. We will create a parent and child feature and make them communicate with each other."}]}]},{"kind":"tasks","tasks":[{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"We will compose the parent and child feature together.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a practice that enable us to build complex functionality by combining smaller, more manageable features."}]}]}],"stepsSection":[{"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create a new file called "},{"code":"ChildFeature.swift","type":"codeVoice"},{"type":"text","text":". This feature contains a - and + button with a label that specify the current value."}],"type":"paragraph"}],"media":null,"caption":[{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Since TCA 1.8, @Reducer macro automatically fulfills the reducer requirements. Our body does not have any logic, so we can omit it.","type":"text"}]}]}],"code":"01-01-01-code0001.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file called ","type":"text"},{"code":"ParentFeature.swift","type":"codeVoice"},{"type":"text","text":" with some basic scaffolding in place."}]}],"media":null,"type":"step","runtimePreview":null,"caption":[{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since TCA 1.8, @Reducer macro automatically fulfills the reducer requirements."}]}]}],"code":"01-01-01-code0002.swift"},{"inlineContent":[{"type":"text","text":"Let’s compose the features together at the reducer level."}],"type":"paragraph"},{"media":null,"runtimePreview":null,"type":"step","caption":[],"code":"01-01-01-code0003.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add a State and Action to the reducer. The parent reducer will hold the state and actions of the Child reducer.","type":"text"}]}]},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to implement the body of the reducer. Previously it was empty because we had no actions. To compose the child reducer in the parent reducer, we use the "},{"type":"reference","isActive":true,"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/scope"},{"text":" reducer. It allows you to focus in on a sub-domain of the parent feature, and run a child reducer on that sub-domain.","type":"text"}]}],"type":"step","media":null,"caption":[{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It exposes child state and action to the parent reducer."}]}]}],"code":"01-01-01-code0004.swift"},{"inlineContent":[{"type":"text","text":"Let’s compose the features together at the view level."}],"type":"paragraph"},{"caption":[],"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},{"text":" method on the store to derive a child store focused in on just the child domain.","type":"text"}],"type":"paragraph"}],"type":"step","code":"01-01-01-code0005.swift","media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The two views are now composed together:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The parent state consists of its own values and the child state."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The Store of the Child is a scoped variant of the parent.","type":"text"}]}]}]}],"title":"Creating a parent view with a child view","anchor":"Creating-a-parent-view-with-a-child-view"},{"anchor":"Communication-from-Child-to-Parent","title":"Communication from Child to Parent","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.","type":"text"}]},{"inlineContent":[{"text":"The terms “parent” and “child” are used to describe the relationship between different components or modules within an app.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"inlineContent":[{"type":"text","text":"Let’s see how the child chould communicate with a parent feature."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If the parent needs to respond to events happening into the child, it can simply listen to the corresponding actions that arrive in the reducer."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"We just need to add an action to listen to from the child reducer.","type":"text"}],"type":"paragraph"}],"caption":[{"name":"Note","content":[{"inlineContent":[{"text":"This is possible thanks to Scope reducer","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"}],"media":null,"runtimePreview":null,"code":"01-01-02-code0001.swift","type":"step"},{"type":"paragraph","inlineContent":[{"text":"There is no need to add extra code in order to be aware of the current state of the child reducer since the parent reducer has a reference to it.","type":"text"}]}]},{"stepsSection":[{"type":"paragraph","inlineContent":[{"text":"If the parent needs to reuse the logic from the child through sending an action, it can be done by invoking the child reducer directly.","type":"text"}]},{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"To send an action from the parent to the child, invoke the child reducer with a reduce method "},{"isActive":true,"identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/performance\/#Sharing-logic-in-child-features","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"code":"01-01-03-code0001.swift","caption":[]},{"inlineContent":[{"type":"text","text":"If the parent needs to update the state of the child, without any shared logic, we can create an extension on the child state."}],"type":"paragraph"},{"type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"We implement a mutating method where we update any needed state and return an action.","type":"text"}],"type":"paragraph"}],"code":"01-01-03-code0002.swift","caption":[{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"It is better to use a mutating method rather than updating the child state directly from the parent reducer as a new child reducer would be recreated.","type":"text"}],"type":"paragraph"}],"name":"Note"}]}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"We’ve seen how the child communicate to its parent. The same approch cannot be follow."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Communication-from-Parent-to-Child","title":"Communication from Parent to Child"}]}],"metadata":{"category":"The Composable Architecture","role":"project","title":"Building a Parent-Child Relationship","categoryPathComponent":"RefineComposableArchitecture"},"hierarchy":{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","modules":[{"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Creating-a-parent-view-with-a-child-view"},{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Communication-from-Child-to-Parent"},{"kind":"task","reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Communication-from-Parent-to-Child"}],"reference":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial"}]}],"paths":[["doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture","doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/$volume","doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features"]]},"identifier":{"url":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/learnwithromain\/parentchildtutorial"]}],"references":{"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Communication-from-Parent-to-Child":{"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/learnwithromain\/parentchildtutorial#Communication-from-Parent-to-Child","abstract":[{"type":"text","text":"Learn how to operate Parent-child communication in between TCA features. We will create a parent and child feature and make them communicate with each other."}],"title":"Communication from Parent to Child","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Communication-from-Parent-to-Child"},"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture/Composing-features":{"type":"topic","role":"article","kind":"article","url":"\/tutorials\/refinecomposablearchitecture\/composing-features","abstract":[],"title":"Composing features","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture\/Composing-features"},"01-01-01-code0004.swift":{"highlights":[{"line":16},{"line":17},{"line":18},{"line":19}],"fileType":"swift","fileName":"ParentFeature.swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""],"syntax":"swift","identifier":"01-01-01-code0004.swift"},"01-01-03-code0002.swift":{"highlights":[{"line":23},{"line":24},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"type":"file","fileType":"swift","syntax":"swift","fileName":"ParentFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.plusButtonTapped):","                let newNumber = state.child.number + 1","                return state.child.updateNumber(with: newNumber).map(Action.child)","            }","        }","    }","}","","extension ChildFeature.State {","    mutating func updateNumber(with number: Int) -> Effect<ChildFeature.Action> {","        self.number = number","        return .none","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}"],"identifier":"01-01-03-code0002.swift"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Creating-a-parent-view-with-a-child-view":{"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/learnwithromain\/parentchildtutorial#Creating-a-parent-view-with-a-child-view","abstract":[{"type":"text","text":"Learn how to operate Parent-child communication in between TCA features. We will create a parent and child feature and make them communicate with each other."}],"title":"Creating a parent view with a child view","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Creating-a-parent-view-with-a-child-view"},"01-01-01-code0002.swift":{"highlights":[],"type":"file","fileType":"swift","syntax":"swift","fileName":"ParentFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""],"identifier":"01-01-01-code0002.swift"},"01-01-01-code0005.swift":{"highlights":[{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"fileType":"swift","fileName":"ParentFeature.swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""],"syntax":"swift","identifier":"01-01-01-code0005.swift"},"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/scope":{"type":"link","identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/scope","title":" Scope","titleInlineContent":[{"type":"text","text":" Scope"}],"url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/scope"},"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/store/scope(state:action:)-90255":{"type":"link","identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","title":" scope(state:action:)","titleInlineContent":[{"type":"text","text":" scope(state:action:)"}],"url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},"01-01-01-code0001.swift":{"highlights":[],"type":"file","fileType":"swift","syntax":"swift","fileName":"ChildFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ChildFeature {","    @ObservableState","    struct State {","        var number: Int","    }","    ","    enum Action {","        case minusButtonTapped","        case plusButtonTapped","    }","}","","struct ChildView: View {","    let store: StoreOf<ChildFeature>","    ","    var body: some View {","        HStack {","            Button(\"-\") {","                send(.minusButtonTapped)","            }","            Text(String(store.number))","            Button(\"+\") {","                send(.plusButtonTapped)","            }","        }","    }","}"],"identifier":"01-01-01-code0001.swift"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial":{"type":"topic","role":"project","kind":"project","url":"\/tutorials\/learnwithromain\/parentchildtutorial","abstract":[{"type":"text","text":"Learn how to operate Parent-child communication in between TCA features. We will create a parent and child feature and make them communicate with each other."}],"title":"Building a Parent-Child Relationship","estimatedTime":"30min","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial"},"doc://com.learnwithromain.learnwithromain/tutorials/RefineComposableArchitecture":{"type":"topic","role":"overview","kind":"overview","url":"\/tutorials\/refinecomposablearchitecture","abstract":[{"type":"text","text":"This interactive tutorial:"},{"type":"text","text":" "},{"text":"1️⃣ aims to provide best practices for building a project with TCA.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"2️⃣ is at an advanced level and requires mastery of the basics of TCA."},{"type":"text","text":" "},{"type":"text","text":"3️⃣ is currently updated with TCA 1.8."}],"title":"Refine the Composable Architecture","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/RefineComposableArchitecture"},"01-01-01-code0003.swift":{"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"fileType":"swift","fileName":"ParentFeature.swift","type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Reduce { state, action in","            \/\/ Core logic of the app feature","            return .none","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        EmptyView()","    }","}",""],"syntax":"swift","identifier":"01-01-01-code0003.swift"},"01-01-02-code0001.swift":{"highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"type":"file","fileType":"swift","syntax":"swift","fileName":"ParentFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.plusButtonTapped):","                \/\/ We listen to the plusButtonTapped child action","                return .none","            default:","                return .none","            }","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""],"identifier":"01-01-02-code0001.swift"},"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/performance/#Sharing-logic-in-child-features":{"title":"Sharing logic in child features","identifier":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/performance\/#Sharing-logic-in-child-features","url":"https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/performance\/#Sharing-logic-in-child-features","type":"link","titleInlineContent":[{"type":"text","text":"Sharing logic in child features"}]},"01-01-03-code0001.swift":{"highlights":[{"line":23}],"type":"file","fileType":"swift","syntax":"swift","fileName":"ParentFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct ParentFeature {","    @ObservableState","    struct State {","        var child: ChildFeature.State","    }","    ","    enum Action {","        case child(ChildFeature.Action)","    }","    ","    var body: some ReducerOf<Self> {","        Scope(state: \\.child, action: \\.child) {","            ChildFeature()","        }","        ","        Reduce { state, action in","            switch action {","            case .child(.plusButtonTapped):","                return ChildFeature().reduce(into: &state.child, action: .otherMinusAction).map(Action.child)","            }","        }","    }","}","","struct ParentView: View {","    let store: StoreOf<ParentFeature>","    ","    var body: some View {","        VStack {","            ChildView(store: store.scope(","                state: \\.child,","                action: \\.child","            ))","        }","    }","}",""],"identifier":"01-01-03-code0001.swift"},"doc://com.learnwithromain.learnwithromain/tutorials/learnwithromain/ParentChildTutorial#Communication-from-Child-to-Parent":{"type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/learnwithromain\/parentchildtutorial#Communication-from-Child-to-Parent","abstract":[{"type":"text","text":"Learn how to operate Parent-child communication in between TCA features. We will create a parent and child feature and make them communicate with each other."}],"title":"Communication from Child to Parent","identifier":"doc:\/\/com.learnwithromain.learnwithromain\/tutorials\/learnwithromain\/ParentChildTutorial#Communication-from-Child-to-Parent"}}}