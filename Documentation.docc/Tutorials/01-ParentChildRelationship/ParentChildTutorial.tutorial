@Tutorial(time: 30) {
    @Intro(title: "Building a Parent-Child Relationship") {
        Parent-child communication refers to the exchange of information or triggering of actions between hierarchical views.
        
        - The parent state consists of its own values and the child state.
        - The Store of the Child is a scoped variant of the parent.
        - The parent reducer will receive every action sent by the child reducer.
        - The parent can modify the state of the child.        
    }
    
    @Section(title: "Creating a parent view with a child view") {
        @ContentAndMedia {
            the terms "parent" and "child" are often used to describe the relationship between different components or modules within an app. Feature composition refers to the practice of building complex functionality by combining smaller, more manageable features.             
        }
        
        @Steps {
            @Step {
                Create a new file called ChildFeature.swift with some basic scaffolding in place.
                
                @Code(name: "ChildFeature.swift", file: 01-01-01-code0001.swift)
            }
            
            @Step {
                Create a new file called ParentFeature.swift with some basic scaffolding in place.
                
                @Code(name: "ParentFeature.swift", file: 01-01-01-code0002.swift)
            }
            
            Let's compose the features together at the reducer level.
            
            @Step {
                Add a State and Action to the reducer. The parent reducer will hold the state and actions of the Child reducer.
                
                @Code(name: "ParentFeature.swift", file: 01-01-01-code0003.swift)
            }
            
            @Step {
                Next we need to implement the body of the reducer. Previously it was empty because we had no actions. To compose the child reducer in the parent reducer, we can use the Scope reducer. t allows you to focus in on a sub-domain of the parent feature, and run a child reducer on that sub-domain.
                
                @Code(name: "ParentFeature.swift", file: 01-01-01-code0003.swift)
            }
        }
    }   
        
    The AppFeature is now a fully composed feature 
        
    @Section(title: "Child -> Parent communication") {
        @ContentAndMedia {
            the terms "parent" and "child" are often used to describe the relationship between different components or modules within an app. Feature composition refers to the practice of building complex functionality by combining smaller, more manageable features.             
        }
        
        @Steps {
            If the parent needs to respond to events in the child, it can simply listen to the corresponding actions that arrive in the reducer.
            
            If the parent needs to listen to actions from the child, we need to scope the child view from the parent view, in order to receive 
            
            @Step {
                Create a new file called ChildFeature.swift with some basic scaffolding in place.
                
                @Code(name: "ChildFeature.swift", file: 01-01-01-code0001.swift)
            }
            
            @Step {
                Create a new file called ParentFeature.swift with some basic scaffolding in place.
                
                @Code(name: "ParentFeature.swift", file: 01-01-01-code0002.swift)
            }
        }
    }
}
